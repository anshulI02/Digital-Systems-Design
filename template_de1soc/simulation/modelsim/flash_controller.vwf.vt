// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2024 22:23:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          simple_ipod_solution
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simple_ipod_solution_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg treg_FPGA_I2C_SDAT;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [3:0] KEY;
reg treg_PS2_CLK;
reg treg_PS2_DAT;
reg [9:0] SW;
reg TD_CLK27;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [9:0] LEDR;
wire PS2_CLK;
wire PS2_DAT;

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign DRAM_DQ = treg_DRAM_DQ;
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
assign PS2_CLK = treg_PS2_CLK;
assign PS2_DAT = treg_PS2_DAT;
simple_ipod_solution i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.KEY(KEY),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SW(SW),
	.TD_CLK27(TD_CLK27)
);
initial 
begin 
#1000000 $stop;
end 
endmodule

